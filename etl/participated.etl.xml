<!DOCTYPE etl SYSTEM "http://scriptella.org/dtd/etl.dtd">
<etl>
    <description>Implement HasName predicate</description>

    <!-- Connection declarations -->
    <connection id="in" driver="csv" url="../source-data/oly/athlete_events-upto2016.csv">
        <!-- "ID","Name","Sex","Age","Height","Weight","Team","NOC","Year","Season","City","Sport","Event","Medal" -->
        null_string=NA
    </connection>
    <connection id="countrycodes" driver="csv" url="../source-data/sup/country-codes.csv">
        <!-- "Country","IOC","FIFA","ISO" -->
        null_string=null
    </connection>
    <connection id="hosted" driver="csv" url="../source-data/geo/hosting-countries.csv">
        <!-- Year,Host_country,Host_city -->
    </connection>
    <connection id="out" url="jdbc:postgresql://localhost:5432/project_ace" user="admin" password="password">
    </connection>
    <!-- Required to ensure unique additions -->
    <connection id="js" driver="script">
        language=rhino
        <!-- JS engine suggested by the author themself:
            https://github.com/scriptella/scriptella-etl/issues/2
        -->
    </connection>

    <!-- Reset tables -->
    <script connection-id="out">
        DROP TABLE IF EXISTS ParticipatedWithResults CASCADE;
        CREATE TABLE ParticipatedWithResults (
            id varchar,
            year int,
            sport varchar,
            event varchar,
            medal varchar
        );

        DROP TABLE IF EXISTS AthleteIsInCountry;
        CREATE TABLE AthleteIsInCountry (
            id varchar,
            cc varchar
        );

        DROP TABLE IF EXISTS AthleteWasInCountry;
        CREATE TABLE AthleteWasInCountry (
            id varchar,
            year int,
            cc varchar
        );

        DROP TABLE IF EXISTS EditionIsInCountry;
        CREATE TABLE EditionIsInCountry (
            year int,
            cc varchar
        );
    </script>

    <query connection-id="js">
        athlete_country_pairs = new Set()
        athlete_year_country_triples = new Set()
        query.next()

        <!-- Go through the whole CSV and populate the tables -->
        <query connection-id="in">
            <!-- Empty query selects everything -->

            <!-- Don't want to represent "won no medal" as NULL.
                It's not a missing value, rather we know that no medal was won. -->
            <!-- Why enclose the variable inside an object?
                Because it turns out that changes to a variable are only visible
                in nested (child) elements, not siblings.
                And I can't nest the SQL script into a JS that's esecuted only conditionally.
                Acting on a mutable object, however, does produce side effect.
                It's not unlike a function's scope. -->
            <query connection-id="js">
                mutable = {the_medal: "None"}
                query.next()

                <script connection-id="js" if="Medal!=null">
                    mutable.the_medal = Medal
                </script>

                <script connection-id="out">
                    INSERT INTO ParticipatedWithResults VALUES (
                        ?ID,
                        CAST(?Year AS int),
                        ?Sport,
                        ?Event,
                        ?{mutable.the_medal}
                    );
                </script>
            </query>

            <query connection-id="countrycodes">
                ,$NOC,,
                <query connection-id="js">
                    if (!athlete_country_pairs.has(ID + "," + ISO)) {
                        athlete_country_pairs.add(ID + "," + ISO)
                        query.next()
                    }
                    <script connection-id="out">
                        INSERT INTO AthleteIsInCountry VALUES (?ID, ?ISO);
                    </script>
                </query>
                <query connection-id="js">
                    if (!athlete_year_country_triples.has(ID + "," + Year + "," + ISO)) {
                        athlete_year_country_triples.add(ID + "," + Year + "," + ISO)
                        query.next()
                    }
                    <script connection-id="out">
                        INSERT INTO AthleteWasInCountry VALUES (?ID, CAST(?Year AS int), ?ISO);
                    </script>
                </query>
            </query>

        </query>

    </query>

    <query connection-id="hosted">
        <!-- Empty query selects everything -->

        <!-- Escape parentheses because one edition happened in
        a nation whose full name in the countrycodes contains some:
        "Korea, Republic of (South)" -->
        <query connection-id="js">
            Host_country = Host_country.replace("(", "\\(").replace(")", "\\)")
            query.next()
            <query connection-id="countrycodes">
                ^${Host_country}$,,,
                <script connection-id="out">
                    INSERT INTO EditionIsInCountry VALUES (
                        CAST(?Year AS int),
                        ?ISO
                    );
                </script>
            </query>
        </query>
    </query>
</etl>
